// <auto-generated />
using System;
using HealthyApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251026024011_InitAllTables")]
    partial class InitAllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("HealthyApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("gender");

                    b.Property<double?>("Height")
                        .HasColumnType("REAL")
                        .HasColumnName("height");

                    b.Property<double?>("InitialWeight")
                        .HasColumnType("REAL")
                        .HasColumnName("initial_weight");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<double?>("TargetWeight")
                        .HasColumnType("REAL")
                        .HasColumnName("target_weight");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("HealthyApi.Models.WaterLog", b =>
                {
                    b.Property<int>("WaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("water_id");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("TEXT")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<string>("WaterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("water_type");

                    b.HasKey("WaterId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("water_logs");
                });

            modelBuilder.Entity("HealthyApi.Models.WeightLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("log_id");

                    b.Property<double?>("BodyFat")
                        .HasColumnType("REAL")
                        .HasColumnName("body_fat");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<string>("TimeOfDay")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_of_day");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL")
                        .HasColumnName("weight");

                    b.HasKey("LogId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("weight_logs");
                });

            modelBuilder.Entity("HealthyApi.Models.WaterLog", b =>
                {
                    b.HasOne("HealthyApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApi.Models.WeightLog", b =>
                {
                    b.HasOne("HealthyApi.Models.User", "User")
                        .WithMany("WeightLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApi.Models.User", b =>
                {
                    b.Navigation("WeightLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
