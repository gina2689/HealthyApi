// <auto-generated />
using System;
using HealthyApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthyApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251026073516_AddMealTables")]
    partial class AddMealTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("HealthyApi.Models.ExerciseLog", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("exercise_id");

                    b.Property<double?>("CaloriesPerUnit")
                        .HasColumnType("REAL")
                        .HasColumnName("calories_per_unit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<double?>("Duration")
                        .HasColumnType("REAL")
                        .HasColumnName("duration");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("exercise_name");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<double?>("TotalCalories")
                        .HasColumnType("REAL")
                        .HasColumnName("total_calories");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("ExerciseId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("exercise_logs");
                });

            modelBuilder.Entity("HealthyApi.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("food_id");

                    b.Property<double>("Calories")
                        .HasColumnType("REAL")
                        .HasColumnName("calories");

                    b.Property<double?>("Carbs")
                        .HasColumnType("REAL")
                        .HasColumnName("carbs");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<double?>("Fat")
                        .HasColumnType("REAL")
                        .HasColumnName("fat");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<double?>("Protein")
                        .HasColumnType("REAL")
                        .HasColumnName("protein");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT")
                        .HasColumnName("unit");

                    b.HasKey("FoodId");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("HealthyApi.Models.MealFood", b =>
                {
                    b.Property<int>("MealFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("meal_food_id");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("amount");

                    b.Property<double>("Calorie")
                        .HasColumnType("REAL")
                        .HasColumnName("calorie");

                    b.Property<int?>("FoodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("food_id");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("food_name");

                    b.Property<int>("MealId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("meal_id");

                    b.HasKey("MealFoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.ToTable("meal_foods");
                });

            modelBuilder.Entity("HealthyApi.Models.MealLog", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("meal_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("meal_type");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("MealId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("meal_logs");
                });

            modelBuilder.Entity("HealthyApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("gender");

                    b.Property<double?>("Height")
                        .HasColumnType("REAL")
                        .HasColumnName("height");

                    b.Property<double?>("InitialWeight")
                        .HasColumnType("REAL")
                        .HasColumnName("initial_weight");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<double?>("TargetWeight")
                        .HasColumnType("REAL")
                        .HasColumnName("target_weight");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("HealthyApi.Models.WaterLog", b =>
                {
                    b.Property<int>("WaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("water_id");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("TEXT")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<string>("WaterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("water_type");

                    b.HasKey("WaterId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("water_logs");
                });

            modelBuilder.Entity("HealthyApi.Models.WeightLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("log_id");

                    b.Property<double?>("BodyFat")
                        .HasColumnType("REAL")
                        .HasColumnName("body_fat");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<string>("TimeOfDay")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_of_day");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL")
                        .HasColumnName("weight");

                    b.HasKey("LogId");

                    b.HasIndex("UserId", "Date");

                    b.ToTable("weight_logs");
                });

            modelBuilder.Entity("HealthyApi.Models.ExerciseLog", b =>
                {
                    b.HasOne("HealthyApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApi.Models.MealFood", b =>
                {
                    b.HasOne("HealthyApi.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.HasOne("HealthyApi.Models.MealLog", "MealLog")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("MealLog");
                });

            modelBuilder.Entity("HealthyApi.Models.MealLog", b =>
                {
                    b.HasOne("HealthyApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApi.Models.WaterLog", b =>
                {
                    b.HasOne("HealthyApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApi.Models.WeightLog", b =>
                {
                    b.HasOne("HealthyApi.Models.User", "User")
                        .WithMany("WeightLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthyApi.Models.MealLog", b =>
                {
                    b.Navigation("MealFoods");
                });

            modelBuilder.Entity("HealthyApi.Models.User", b =>
                {
                    b.Navigation("WeightLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
